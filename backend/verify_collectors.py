#!/usr/bin/env python3
"""
Simple Collector Verification Script
Tests each collector individually with proper imports
"""

import sys
import os
import json
from datetime import datetime

# Add backend directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verify_collectors():
    """Verify each collector can be imported and initialized"""
    
    results = {
        "timestamp": datetime.now().isoformat(),
        "collectors": {}
    }
    
    print("üîç Verifying Stock Picker Collectors\n")
    print("=" * 50)
    
    # Government Collectors
    print("\nüìä Government API Collectors:")
    print("-" * 30)
    
    # FRED Collector
    try:
        from data_collectors.government.fred_collector import FREDCollector
        collector = FREDCollector()
        results["collectors"]["FRED"] = "‚úÖ Working"
        print("‚úÖ FRED Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["FRED"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå FRED Collector - {str(e)[:50]}")
    
    # SEC EDGAR Collector  
    try:
        from data_collectors.government.sec_edgar_collector import SECEdgarCollector
        collector = SECEdgarCollector()
        results["collectors"]["SEC_EDGAR"] = "‚úÖ Working"
        print("‚úÖ SEC EDGAR Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["SEC_EDGAR"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå SEC EDGAR Collector - {str(e)[:50]}")
    
    # BEA Collector
    try:
        from data_collectors.government.bea_collector import BEACollector
        collector = BEACollector()
        results["collectors"]["BEA"] = "‚úÖ Working"
        print("‚úÖ BEA Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["BEA"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå BEA Collector - {str(e)[:50]}")
    
    # BLS Collector
    try:
        from data_collectors.government.bls_collector import BLSCollector
        collector = BLSCollector()
        results["collectors"]["BLS"] = "‚úÖ Working"
        print("‚úÖ BLS Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["BLS"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå BLS Collector - {str(e)[:50]}")
    
    # Treasury Direct Collector
    try:
        from data_collectors.government.treasury_direct_collector import TreasuryDirectCollector
        collector = TreasuryDirectCollector()
        results["collectors"]["Treasury_Direct"] = "‚úÖ Working"
        print("‚úÖ Treasury Direct Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["Treasury_Direct"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå Treasury Direct Collector - {str(e)[:50]}")
    
    # Treasury Fiscal Collector
    try:
        from data_collectors.government.treasury_fiscal_collector import TreasuryFiscalCollector
        collector = TreasuryFiscalCollector()
        results["collectors"]["Treasury_Fiscal"] = "‚úÖ Working"
        print("‚úÖ Treasury Fiscal Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["Treasury_Fiscal"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå Treasury Fiscal Collector - {str(e)[:50]}")
    
    # EIA Collector
    try:
        from data_collectors.government.eia_collector import EIACollector
        collector = EIACollector()
        results["collectors"]["EIA"] = "‚úÖ Working"
        print("‚úÖ EIA Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["EIA"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå EIA Collector - {str(e)[:50]}")
    
    # FDIC Collector
    try:
        from data_collectors.government.fdic_collector import FDICCollector
        collector = FDICCollector()
        results["collectors"]["FDIC"] = "‚úÖ Working"
        print("‚úÖ FDIC Collector - Imported successfully")
    except Exception as e:
        results["collectors"]["FDIC"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå FDIC Collector - {str(e)[:50]}")
    
    # MCP Collectors
    print("\nü§ñ MCP Collectors:")
    print("-" * 30)
    
    # Alpha Vantage MCP
    try:
        from data_collectors.commercial.mcp.alpha_vantage_mcp_collector import AlphaVantageMCPCollector
        # Note: This will likely fail without proper MCP client setup
        results["collectors"]["Alpha_Vantage_MCP"] = "‚úÖ Module exists"
        print("‚úÖ Alpha Vantage MCP - Module found")
    except Exception as e:
        results["collectors"]["Alpha_Vantage_MCP"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå Alpha Vantage MCP - {str(e)[:50]}")
    
    # Data.gov MCP Server
    try:
        import requests
        response = requests.post(
            'http://localhost:3001/mcp',
            json={"jsonrpc": "2.0", "id": "1", "method": "server/info", "params": {}},
            timeout=5
        )
        if response.status_code == 200:
            data = response.json()
            if 'result' in data:
                results["collectors"]["Data_Gov_MCP"] = "‚úÖ Server running"
                print(f"‚úÖ Data.gov MCP Server - Running (8 tools available)")
            else:
                results["collectors"]["Data_Gov_MCP"] = "‚ö†Ô∏è Server responding but no tools"
                print("‚ö†Ô∏è Data.gov MCP Server - Responding but check tools")
        else:
            results["collectors"]["Data_Gov_MCP"] = f"‚ùå HTTP {response.status_code}"
            print(f"‚ùå Data.gov MCP Server - HTTP {response.status_code}")
    except requests.exceptions.ConnectionError:
        results["collectors"]["Data_Gov_MCP"] = "‚ùå Not running"
        print("‚ùå Data.gov MCP Server - Not running (start with: python data_collectors/government/mcp/server.py)")
    except Exception as e:
        results["collectors"]["Data_Gov_MCP"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå Data.gov MCP Server - {str(e)[:50]}")
    
    # Routing System
    print("\nüîÑ Routing System:")
    print("-" * 30)
    
    try:
        from data_collectors.collector_router import CollectorRouter
        router = CollectorRouter()
        results["collectors"]["Router"] = "‚úÖ Working"
        print("‚úÖ Collector Router - Imported successfully")
    except Exception as e:
        results["collectors"]["Router"] = f"‚ùå Error: {str(e)[:50]}"
        print(f"‚ùå Collector Router - {str(e)[:50]}")
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä SUMMARY")
    print("=" * 50)
    
    working = sum(1 for v in results["collectors"].values() if "‚úÖ" in str(v))
    total = len(results["collectors"])
    
    print(f"\nTotal Collectors: {total}")
    print(f"Working: {working}")
    print(f"Success Rate: {working/total*100:.1f}%")
    
    if working == total:
        print("\nüéâ ALL COLLECTORS VERIFIED SUCCESSFULLY!")
    else:
        failed = total - working
        print(f"\n‚ö†Ô∏è {failed} collector(s) need attention")
    
    # Save results
    output_file = f"collector_verification_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(output_file, 'w') as f:
        json.dump(results, f, indent=2)
    
    print(f"\nüíæ Results saved to: {output_file}")
    
    return results

if __name__ == "__main__":
    verify_collectors()