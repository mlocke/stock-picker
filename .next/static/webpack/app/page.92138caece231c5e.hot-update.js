"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/components/StockTicker.tsx":
/*!****************************************!*\
  !*** ./app/components/StockTicker.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ StockTicker; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _StockHoverPopup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StockHoverPopup */ \"(app-pages-browser)/./app/components/StockHoverPopup.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction StockTicker() {\n    _s();\n    const [popupState, setPopupState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        visible: false,\n        symbol: \"\",\n        x: 0,\n        y: 0\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Real-time Stock Ticker Integration\n        let stockDataCache = new Map();\n        let lastUpdateTime = 0;\n        // TradingView widget callback - handles widget loaded event\n        // @ts-ignore\n        window.onTradingViewWidgetLoad = function() {\n            console.log(\"✅ TradingView ticker widget loaded successfully\");\n            // Hide loading text once widget is loaded\n            const loadingElement = document.getElementById(\"ticker-loading\");\n            if (loadingElement) {\n                loadingElement.style.opacity = \"0\";\n                setTimeout(()=>{\n                    loadingElement.style.display = \"none\";\n                }, 300);\n            }\n            // Initialize Polygon MCP integration for additional data\n            initPolygonMCPIntegration();\n        };\n        // Polygon MCP Integration for enhanced data\n        async function initPolygonMCPIntegration() {\n            try {\n                // This would integrate with the backend Polygon MCP collector\n                console.log(\"\\uD83D\\uDD04 Initializing Polygon MCP integration for enhanced data...\");\n                // Set up periodic data refresh for our own analytics\n                setInterval(refreshMarketData, 30000) // Every 30 seconds\n                ;\n                // Initial data load\n                await refreshMarketData();\n            } catch (error) {\n                console.log(\"⚠️ Polygon MCP integration optional - using TradingView data only\");\n            }\n        }\n        async function refreshMarketData() {\n            try {\n                // This would call our backend endpoint that uses Polygon MCP\n                // For now, just log the intention\n                console.log(\"\\uD83D\\uDD04 Refreshing market data via backend API...\");\n                const symbols = [\n                    \"AAPL\",\n                    \"MSFT\",\n                    \"GOOGL\",\n                    \"AMZN\",\n                    \"TSLA\",\n                    \"META\",\n                    \"NVDA\",\n                    \"SPY\"\n                ];\n                // Future: Replace with actual backend call\n                // const response = await fetch('/api/market-data/real-time', {\n                //     method: 'POST',\n                //     headers: { 'Content-Type': 'application/json' },\n                //     body: JSON.stringify({ symbols })\n                // });\n                // const data = await response.json();\n                lastUpdateTime = Date.now();\n            } catch (error) {\n                console.log(\"\\uD83D\\uDCCA Using TradingView data as primary source\");\n            }\n        }\n        // Set up hover detection for stock symbols\n        const setupHoverDetection = ()=>{\n            let hoverTimer;\n            let lastSymbol = \"\";\n            // Listen for mouse events on the ticker area\n            const tickerContainer = document.querySelector(\".stock-ticker\");\n            if (tickerContainer) {\n                tickerContainer.addEventListener(\"mousemove\", (e)=>{\n                    clearTimeout(hoverTimer);\n                    // Extract symbol from hover position with improved accuracy\n                    const rect = tickerContainer.getBoundingClientRect();\n                    const relativeX = e.clientX - rect.left;\n                    // Define symbols in the exact order they appear in the ticker\n                    const symbolData = [\n                        {\n                            symbol: \"AAPL\",\n                            exchange: \"NASDAQ\",\n                            name: \"Apple Inc.\"\n                        },\n                        {\n                            symbol: \"MSFT\",\n                            exchange: \"NASDAQ\",\n                            name: \"Microsoft Corporation\"\n                        },\n                        {\n                            symbol: \"GOOGL\",\n                            exchange: \"NASDAQ\",\n                            name: \"Alphabet Inc.\"\n                        },\n                        {\n                            symbol: \"AMZN\",\n                            exchange: \"NASDAQ\",\n                            name: \"Amazon.com Inc.\"\n                        },\n                        {\n                            symbol: \"TSLA\",\n                            exchange: \"NASDAQ\",\n                            name: \"Tesla Inc.\"\n                        },\n                        {\n                            symbol: \"META\",\n                            exchange: \"NASDAQ\",\n                            name: \"Meta Platforms Inc.\"\n                        },\n                        {\n                            symbol: \"NVDA\",\n                            exchange: \"NASDAQ\",\n                            name: \"NVIDIA Corporation\"\n                        },\n                        {\n                            symbol: \"SPY\",\n                            exchange: \"AMEX\",\n                            name: \"SPDR S&P 500 ETF Trust\"\n                        },\n                        {\n                            symbol: \"QQQ\",\n                            exchange: \"NASDAQ\",\n                            name: \"Invesco QQQ Trust\"\n                        },\n                        {\n                            symbol: \"IWM\",\n                            exchange: \"NYSE\",\n                            name: \"iShares Russell 2000 ETF\"\n                        }\n                    ];\n                    // More precise symbol detection\n                    // The ticker typically shows about 4-6 symbols at once, so we need to account for scrolling\n                    const visibleWidth = rect.width;\n                    const estimatedSymbolWidth = visibleWidth / 5 // Assume 5 visible symbols at once\n                    ;\n                    // Get the symbol based on position, accounting for the scrolling nature of the ticker\n                    const currentTime = Date.now();\n                    const scrollOffset = currentTime / 50 % (symbolData.length * estimatedSymbolWidth // Simulate scroll\n                    );\n                    const adjustedPosition = (relativeX + scrollOffset) % (symbolData.length * estimatedSymbolWidth);\n                    const symbolIndex = Math.floor(adjustedPosition / estimatedSymbolWidth) % symbolData.length;\n                    const symbolInfo = symbolData[symbolIndex];\n                    if (symbolInfo && symbolInfo.symbol !== lastSymbol) {\n                        lastSymbol = symbolInfo.symbol;\n                        hoverTimer = setTimeout(()=>{\n                            setPopupState({\n                                visible: true,\n                                symbol: symbolInfo.symbol,\n                                exchange: symbolInfo.exchange,\n                                name: symbolInfo.name,\n                                x: Math.min(e.clientX + 15, window.innerWidth - 500),\n                                y: Math.max(e.clientY - 400, 100) // Position above the ticker\n                            });\n                        }, 200) // Quick response\n                        ;\n                    }\n                });\n                tickerContainer.addEventListener(\"mouseleave\", ()=>{\n                    clearTimeout(hoverTimer);\n                    lastSymbol = \"\";\n                    setPopupState((prev)=>({\n                            ...prev,\n                            visible: false\n                        }));\n                });\n            }\n        };\n        // Set up TradingView widget monitoring\n        const observer = new MutationObserver(function(mutations) {\n            mutations.forEach(function(mutation) {\n                if (mutation.type === \"childList\") {\n                    const iframe = document.querySelector(\".stock-ticker iframe\");\n                    if (iframe) {\n                        console.log(\"\\uD83D\\uDCC8 Real-time ticker iframe loaded\");\n                        // Hide loading text when iframe is detected\n                        const loadingElement = document.getElementById(\"ticker-loading\");\n                        if (loadingElement) {\n                            loadingElement.style.opacity = \"0\";\n                            setTimeout(()=>{\n                                loadingElement.style.display = \"none\";\n                            }, 300);\n                        }\n                        // Set up hover detection after iframe loads\n                        setTimeout(setupHoverDetection, 1000);\n                        observer.disconnect();\n                    }\n                }\n            });\n        });\n        const tickerElement = document.querySelector(\".stock-ticker\");\n        if (tickerElement) {\n            observer.observe(tickerElement, {\n                childList: true,\n                subtree: true\n            });\n        }\n        // Fallback: hide loading text after 10 seconds regardless\n        const fallbackTimer = setTimeout(()=>{\n            const loadingElement = document.getElementById(\"ticker-loading\");\n            if (loadingElement && loadingElement.style.display !== \"none\") {\n                loadingElement.style.opacity = \"0\";\n                setTimeout(()=>{\n                    loadingElement.style.display = \"none\";\n                }, 300);\n            }\n        }, 10000);\n        // Load TradingView script\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = \"https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js\";\n        script.async = true;\n        script.innerHTML = JSON.stringify({\n            \"symbols\": [\n                {\n                    \"proName\": \"NASDAQ:AAPL\",\n                    \"title\": \"Apple Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:MSFT\",\n                    \"title\": \"Microsoft Corporation\"\n                },\n                {\n                    \"proName\": \"NASDAQ:GOOGL\",\n                    \"title\": \"Alphabet Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:AMZN\",\n                    \"title\": \"Amazon.com Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:TSLA\",\n                    \"title\": \"Tesla Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:META\",\n                    \"title\": \"Meta Platforms Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:NVDA\",\n                    \"title\": \"NVIDIA Corporation\"\n                },\n                {\n                    \"proName\": \"AMEX:SPY\",\n                    \"title\": \"SPDR S&P 500 ETF Trust\"\n                },\n                {\n                    \"proName\": \"NASDAQ:QQQ\",\n                    \"title\": \"Invesco QQQ Trust\"\n                },\n                {\n                    \"proName\": \"NYSE:IWM\",\n                    \"title\": \"iShares Russell 2000 ETF\"\n                }\n            ],\n            \"showSymbolLogo\": true,\n            \"isTransparent\": true,\n            \"displayMode\": \"adaptive\",\n            \"colorTheme\": \"dark\",\n            \"locale\": \"en\"\n        });\n        const widgetContainer = document.querySelector(\".tradingview-widget-container__widget\");\n        if (widgetContainer) {\n            widgetContainer.appendChild(script);\n        }\n        return ()=>{\n            clearTimeout(fallbackTimer);\n            observer.disconnect();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"stock-ticker\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"tradingview-widget-container\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"tradingview-widget-container__widget\"\n                    }, void 0, false, {\n                        fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                        lineNumber: 256,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                    lineNumber: 255,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                lineNumber: 254,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"ticker-loading\",\n                id: \"ticker-loading\",\n                children: \"Loading real-time market data...\"\n            }, void 0, false, {\n                fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                lineNumber: 261,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_StockHoverPopup__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                symbol: popupState.symbol,\n                visible: popupState.visible,\n                x: popupState.x,\n                y: popupState.y\n            }, void 0, false, {\n                fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                lineNumber: 266,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_s(StockTicker, \"Hr8imdBwXUWH7qU6x31LeMtZp0I=\");\n_c = StockTicker;\nvar _c;\n$RefreshReg$(_c, \"StockTicker\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL1N0b2NrVGlja2VyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRTJDO0FBQ0k7QUFFaEMsU0FBU0c7O0lBQ3RCLE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHSiwrQ0FBUUEsQ0FBQztRQUMzQ0ssU0FBUztRQUNUQyxRQUFRO1FBQ1JDLEdBQUc7UUFDSEMsR0FBRztJQUNMO0lBQ0FULGdEQUFTQSxDQUFDO1FBQ1IscUNBQXFDO1FBQ3JDLElBQUlVLGlCQUFpQixJQUFJQztRQUN6QixJQUFJQyxpQkFBaUI7UUFFckIsNERBQTREO1FBQzVELGFBQWE7UUFDYkMsT0FBT0MsdUJBQXVCLEdBQUc7WUFDL0JDLFFBQVFDLEdBQUcsQ0FBQztZQUVaLDBDQUEwQztZQUMxQyxNQUFNQyxpQkFBaUJDLFNBQVNDLGNBQWMsQ0FBQztZQUMvQyxJQUFJRixnQkFBZ0I7Z0JBQ2xCQSxlQUFlRyxLQUFLLENBQUNDLE9BQU8sR0FBRztnQkFDL0JDLFdBQVc7b0JBQ1RMLGVBQWVHLEtBQUssQ0FBQ0csT0FBTyxHQUFHO2dCQUNqQyxHQUFHO1lBQ0w7WUFFQSx5REFBeUQ7WUFDekRDO1FBQ0Y7UUFFQSw0Q0FBNEM7UUFDNUMsZUFBZUE7WUFDYixJQUFJO2dCQUNGLDhEQUE4RDtnQkFDOURULFFBQVFDLEdBQUcsQ0FBQztnQkFFWixxREFBcUQ7Z0JBQ3JEUyxZQUFZQyxtQkFBbUIsT0FBTyxtQkFBbUI7O2dCQUV6RCxvQkFBb0I7Z0JBQ3BCLE1BQU1BO1lBQ1IsRUFBRSxPQUFPQyxPQUFPO2dCQUNkWixRQUFRQyxHQUFHLENBQUM7WUFDZDtRQUNGO1FBRUEsZUFBZVU7WUFDYixJQUFJO2dCQUNGLDZEQUE2RDtnQkFDN0Qsa0NBQWtDO2dCQUNsQ1gsUUFBUUMsR0FBRyxDQUFDO2dCQUVaLE1BQU1ZLFVBQVU7b0JBQUM7b0JBQVE7b0JBQVE7b0JBQVM7b0JBQVE7b0JBQVE7b0JBQVE7b0JBQVE7aUJBQU07Z0JBRWhG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ckYsd0RBQWVBO2dCQUNkSyxRQUFRSCxXQUFXRyxNQUFNO2dCQUN6QkQsU0FBU0YsV0FBV0UsT0FBTztnQkFDM0JFLEdBQUdKLFdBQVdJLENBQUM7Z0JBQ2ZDLEdBQUdMLFdBQVdLLENBQUM7Ozs7Ozs7O0FBSXZCO0dBNVF3Qk47S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvU3RvY2tUaWNrZXIudHN4P2YyMTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBTdG9ja0hvdmVyUG9wdXAgZnJvbSAnLi9TdG9ja0hvdmVyUG9wdXAnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0b2NrVGlja2VyKCkge1xuICBjb25zdCBbcG9wdXBTdGF0ZSwgc2V0UG9wdXBTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgdmlzaWJsZTogZmFsc2UsXG4gICAgc3ltYm9sOiAnJyxcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfSlcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBSZWFsLXRpbWUgU3RvY2sgVGlja2VyIEludGVncmF0aW9uXG4gICAgbGV0IHN0b2NrRGF0YUNhY2hlID0gbmV3IE1hcCgpXG4gICAgbGV0IGxhc3RVcGRhdGVUaW1lID0gMFxuICAgIFxuICAgIC8vIFRyYWRpbmdWaWV3IHdpZGdldCBjYWxsYmFjayAtIGhhbmRsZXMgd2lkZ2V0IGxvYWRlZCBldmVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB3aW5kb3cub25UcmFkaW5nVmlld1dpZGdldExvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgVHJhZGluZ1ZpZXcgdGlja2VyIHdpZGdldCBsb2FkZWQgc3VjY2Vzc2Z1bGx5JylcbiAgICAgIFxuICAgICAgLy8gSGlkZSBsb2FkaW5nIHRleHQgb25jZSB3aWRnZXQgaXMgbG9hZGVkXG4gICAgICBjb25zdCBsb2FkaW5nRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aWNrZXItbG9hZGluZycpXG4gICAgICBpZiAobG9hZGluZ0VsZW1lbnQpIHtcbiAgICAgICAgbG9hZGluZ0VsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJ1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBsb2FkaW5nRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIH0sIDMwMClcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gSW5pdGlhbGl6ZSBQb2x5Z29uIE1DUCBpbnRlZ3JhdGlvbiBmb3IgYWRkaXRpb25hbCBkYXRhXG4gICAgICBpbml0UG9seWdvbk1DUEludGVncmF0aW9uKClcbiAgICB9XG5cbiAgICAvLyBQb2x5Z29uIE1DUCBJbnRlZ3JhdGlvbiBmb3IgZW5oYW5jZWQgZGF0YVxuICAgIGFzeW5jIGZ1bmN0aW9uIGluaXRQb2x5Z29uTUNQSW50ZWdyYXRpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdvdWxkIGludGVncmF0ZSB3aXRoIHRoZSBiYWNrZW5kIFBvbHlnb24gTUNQIGNvbGxlY3RvclxuICAgICAgICBjb25zb2xlLmxvZygn8J+UhCBJbml0aWFsaXppbmcgUG9seWdvbiBNQ1AgaW50ZWdyYXRpb24gZm9yIGVuaGFuY2VkIGRhdGEuLi4nKVxuICAgICAgICBcbiAgICAgICAgLy8gU2V0IHVwIHBlcmlvZGljIGRhdGEgcmVmcmVzaCBmb3Igb3VyIG93biBhbmFseXRpY3NcbiAgICAgICAgc2V0SW50ZXJ2YWwocmVmcmVzaE1hcmtldERhdGEsIDMwMDAwKSAvLyBFdmVyeSAzMCBzZWNvbmRzXG4gICAgICAgIFxuICAgICAgICAvLyBJbml0aWFsIGRhdGEgbG9hZFxuICAgICAgICBhd2FpdCByZWZyZXNoTWFya2V0RGF0YSgpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygn4pqg77iPIFBvbHlnb24gTUNQIGludGVncmF0aW9uIG9wdGlvbmFsIC0gdXNpbmcgVHJhZGluZ1ZpZXcgZGF0YSBvbmx5JylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiByZWZyZXNoTWFya2V0RGF0YSgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd291bGQgY2FsbCBvdXIgYmFja2VuZCBlbmRwb2ludCB0aGF0IHVzZXMgUG9seWdvbiBNQ1BcbiAgICAgICAgLy8gRm9yIG5vdywganVzdCBsb2cgdGhlIGludGVudGlvblxuICAgICAgICBjb25zb2xlLmxvZygn8J+UhCBSZWZyZXNoaW5nIG1hcmtldCBkYXRhIHZpYSBiYWNrZW5kIEFQSS4uLicpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBzeW1ib2xzID0gWydBQVBMJywgJ01TRlQnLCAnR09PR0wnLCAnQU1aTicsICdUU0xBJywgJ01FVEEnLCAnTlZEQScsICdTUFknXVxuICAgICAgICBcbiAgICAgICAgLy8gRnV0dXJlOiBSZXBsYWNlIHdpdGggYWN0dWFsIGJhY2tlbmQgY2FsbFxuICAgICAgICAvLyBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL21hcmtldC1kYXRhL3JlYWwtdGltZScsIHtcbiAgICAgICAgLy8gICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAvLyAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIC8vICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHN5bWJvbHMgfSlcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIFxuICAgICAgICBsYXN0VXBkYXRlVGltZSA9IERhdGUubm93KClcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OKIFVzaW5nIFRyYWRpbmdWaWV3IGRhdGEgYXMgcHJpbWFyeSBzb3VyY2UnKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB1cCBob3ZlciBkZXRlY3Rpb24gZm9yIHN0b2NrIHN5bWJvbHNcbiAgICBjb25zdCBzZXR1cEhvdmVyRGV0ZWN0aW9uID0gKCkgPT4ge1xuICAgICAgbGV0IGhvdmVyVGltZXI6IE5vZGVKUy5UaW1lb3V0XG4gICAgICBsZXQgbGFzdFN5bWJvbCA9ICcnXG4gICAgICBcbiAgICAgIC8vIExpc3RlbiBmb3IgbW91c2UgZXZlbnRzIG9uIHRoZSB0aWNrZXIgYXJlYVxuICAgICAgY29uc3QgdGlja2VyQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0b2NrLXRpY2tlcicpXG4gICAgICBpZiAodGlja2VyQ29udGFpbmVyKSB7XG4gICAgICAgIHRpY2tlckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xuICAgICAgICAgIGNsZWFyVGltZW91dChob3ZlclRpbWVyKVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIEV4dHJhY3Qgc3ltYm9sIGZyb20gaG92ZXIgcG9zaXRpb24gd2l0aCBpbXByb3ZlZCBhY2N1cmFjeVxuICAgICAgICAgIGNvbnN0IHJlY3QgPSB0aWNrZXJDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICBjb25zdCByZWxhdGl2ZVggPSBlLmNsaWVudFggLSByZWN0LmxlZnRcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBEZWZpbmUgc3ltYm9scyBpbiB0aGUgZXhhY3Qgb3JkZXIgdGhleSBhcHBlYXIgaW4gdGhlIHRpY2tlclxuICAgICAgICAgIGNvbnN0IHN5bWJvbERhdGEgPSBbXG4gICAgICAgICAgICB7IHN5bWJvbDogJ0FBUEwnLCBleGNoYW5nZTogJ05BU0RBUScsIG5hbWU6ICdBcHBsZSBJbmMuJyB9LFxuICAgICAgICAgICAgeyBzeW1ib2w6ICdNU0ZUJywgZXhjaGFuZ2U6ICdOQVNEQVEnLCBuYW1lOiAnTWljcm9zb2Z0IENvcnBvcmF0aW9uJyB9LFxuICAgICAgICAgICAgeyBzeW1ib2w6ICdHT09HTCcsIGV4Y2hhbmdlOiAnTkFTREFRJywgbmFtZTogJ0FscGhhYmV0IEluYy4nIH0sXG4gICAgICAgICAgICB7IHN5bWJvbDogJ0FNWk4nLCBleGNoYW5nZTogJ05BU0RBUScsIG5hbWU6ICdBbWF6b24uY29tIEluYy4nIH0sXG4gICAgICAgICAgICB7IHN5bWJvbDogJ1RTTEEnLCBleGNoYW5nZTogJ05BU0RBUScsIG5hbWU6ICdUZXNsYSBJbmMuJyB9LFxuICAgICAgICAgICAgeyBzeW1ib2w6ICdNRVRBJywgZXhjaGFuZ2U6ICdOQVNEQVEnLCBuYW1lOiAnTWV0YSBQbGF0Zm9ybXMgSW5jLicgfSxcbiAgICAgICAgICAgIHsgc3ltYm9sOiAnTlZEQScsIGV4Y2hhbmdlOiAnTkFTREFRJywgbmFtZTogJ05WSURJQSBDb3Jwb3JhdGlvbicgfSxcbiAgICAgICAgICAgIHsgc3ltYm9sOiAnU1BZJywgZXhjaGFuZ2U6ICdBTUVYJywgbmFtZTogJ1NQRFIgUyZQIDUwMCBFVEYgVHJ1c3QnIH0sXG4gICAgICAgICAgICB7IHN5bWJvbDogJ1FRUScsIGV4Y2hhbmdlOiAnTkFTREFRJywgbmFtZTogJ0ludmVzY28gUVFRIFRydXN0JyB9LFxuICAgICAgICAgICAgeyBzeW1ib2w6ICdJV00nLCBleGNoYW5nZTogJ05ZU0UnLCBuYW1lOiAnaVNoYXJlcyBSdXNzZWxsIDIwMDAgRVRGJyB9XG4gICAgICAgICAgXVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIE1vcmUgcHJlY2lzZSBzeW1ib2wgZGV0ZWN0aW9uXG4gICAgICAgICAgLy8gVGhlIHRpY2tlciB0eXBpY2FsbHkgc2hvd3MgYWJvdXQgNC02IHN5bWJvbHMgYXQgb25jZSwgc28gd2UgbmVlZCB0byBhY2NvdW50IGZvciBzY3JvbGxpbmdcbiAgICAgICAgICBjb25zdCB2aXNpYmxlV2lkdGggPSByZWN0LndpZHRoXG4gICAgICAgICAgY29uc3QgZXN0aW1hdGVkU3ltYm9sV2lkdGggPSB2aXNpYmxlV2lkdGggLyA1IC8vIEFzc3VtZSA1IHZpc2libGUgc3ltYm9scyBhdCBvbmNlXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gR2V0IHRoZSBzeW1ib2wgYmFzZWQgb24gcG9zaXRpb24sIGFjY291bnRpbmcgZm9yIHRoZSBzY3JvbGxpbmcgbmF0dXJlIG9mIHRoZSB0aWNrZXJcbiAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KClcbiAgICAgICAgICBjb25zdCBzY3JvbGxPZmZzZXQgPSAoY3VycmVudFRpbWUgLyA1MCkgJSAoc3ltYm9sRGF0YS5sZW5ndGggKiBlc3RpbWF0ZWRTeW1ib2xXaWR0aCkgLy8gU2ltdWxhdGUgc2Nyb2xsXG4gICAgICAgICAgY29uc3QgYWRqdXN0ZWRQb3NpdGlvbiA9IChyZWxhdGl2ZVggKyBzY3JvbGxPZmZzZXQpICUgKHN5bWJvbERhdGEubGVuZ3RoICogZXN0aW1hdGVkU3ltYm9sV2lkdGgpXG4gICAgICAgICAgY29uc3Qgc3ltYm9sSW5kZXggPSBNYXRoLmZsb29yKGFkanVzdGVkUG9zaXRpb24gLyBlc3RpbWF0ZWRTeW1ib2xXaWR0aCkgJSBzeW1ib2xEYXRhLmxlbmd0aFxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHN5bWJvbEluZm8gPSBzeW1ib2xEYXRhW3N5bWJvbEluZGV4XVxuICAgICAgICAgIFxuICAgICAgICAgIGlmIChzeW1ib2xJbmZvICYmIHN5bWJvbEluZm8uc3ltYm9sICE9PSBsYXN0U3ltYm9sKSB7XG4gICAgICAgICAgICBsYXN0U3ltYm9sID0gc3ltYm9sSW5mby5zeW1ib2xcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaG92ZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBzZXRQb3B1cFN0YXRlKHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN5bWJvbDogc3ltYm9sSW5mby5zeW1ib2wsXG4gICAgICAgICAgICAgICAgZXhjaGFuZ2U6IHN5bWJvbEluZm8uZXhjaGFuZ2UsXG4gICAgICAgICAgICAgICAgbmFtZTogc3ltYm9sSW5mby5uYW1lLFxuICAgICAgICAgICAgICAgIHg6IE1hdGgubWluKGUuY2xpZW50WCArIDE1LCB3aW5kb3cuaW5uZXJXaWR0aCAtIDUwMCksXG4gICAgICAgICAgICAgICAgeTogTWF0aC5tYXgoZS5jbGllbnRZIC0gNDAwLCAxMDApIC8vIFBvc2l0aW9uIGFib3ZlIHRoZSB0aWNrZXJcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIDIwMCkgLy8gUXVpY2sgcmVzcG9uc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICB0aWNrZXJDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoaG92ZXJUaW1lcilcbiAgICAgICAgICBsYXN0U3ltYm9sID0gJydcbiAgICAgICAgICBzZXRQb3B1cFN0YXRlKHByZXYgPT4gKHsgLi4ucHJldiwgdmlzaWJsZTogZmFsc2UgfSkpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IHVwIFRyYWRpbmdWaWV3IHdpZGdldCBtb25pdG9yaW5nXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHtcbiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG11dGF0aW9uKSB7XG4gICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdG9jay10aWNrZXIgaWZyYW1lJylcbiAgICAgICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygn8J+TiCBSZWFsLXRpbWUgdGlja2VyIGlmcmFtZSBsb2FkZWQnKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBIaWRlIGxvYWRpbmcgdGV4dCB3aGVuIGlmcmFtZSBpcyBkZXRlY3RlZFxuICAgICAgICAgICAgY29uc3QgbG9hZGluZ0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGlja2VyLWxvYWRpbmcnKVxuICAgICAgICAgICAgaWYgKGxvYWRpbmdFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGxvYWRpbmdFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCdcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICAgICAgICB9LCAzMDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNldCB1cCBob3ZlciBkZXRlY3Rpb24gYWZ0ZXIgaWZyYW1lIGxvYWRzXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHNldHVwSG92ZXJEZXRlY3Rpb24sIDEwMDApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgY29uc3QgdGlja2VyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdG9jay10aWNrZXInKVxuICAgIGlmICh0aWNrZXJFbGVtZW50KSB7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHRpY2tlckVsZW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgICBcbiAgICAvLyBGYWxsYmFjazogaGlkZSBsb2FkaW5nIHRleHQgYWZ0ZXIgMTAgc2Vjb25kcyByZWdhcmRsZXNzXG4gICAgY29uc3QgZmFsbGJhY2tUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgbG9hZGluZ0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGlja2VyLWxvYWRpbmcnKVxuICAgICAgaWYgKGxvYWRpbmdFbGVtZW50ICYmIGxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xuICAgICAgICBsb2FkaW5nRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgfSwgMzAwKVxuICAgICAgfVxuICAgIH0sIDEwMDAwKVxuXG4gICAgLy8gTG9hZCBUcmFkaW5nVmlldyBzY3JpcHRcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICBzY3JpcHQuc3JjID0gJ2h0dHBzOi8vczMudHJhZGluZ3ZpZXcuY29tL2V4dGVybmFsLWVtYmVkZGluZy9lbWJlZC13aWRnZXQtdGlja2VyLXRhcGUuanMnXG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZVxuICAgIHNjcmlwdC5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBcInN5bWJvbHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiTkFTREFROkFBUExcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQXBwbGUgSW5jLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInByb05hbWVcIjogXCJOQVNEQVE6TVNGVFwiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJNaWNyb3NvZnQgQ29ycG9yYXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiTkFTREFROkdPT0dMXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkFscGhhYmV0IEluYy5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiTkFTREFROkFNWk5cIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQW1hem9uLmNvbSBJbmMuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwicHJvTmFtZVwiOiBcIk5BU0RBUTpUU0xBXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRlc2xhIEluYy5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiTkFTREFROk1FVEFcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiTWV0YSBQbGF0Zm9ybXMgSW5jLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInByb05hbWVcIjogXCJOQVNEQVE6TlZEQVwiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJOVklESUEgQ29ycG9yYXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiQU1FWDpTUFlcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiU1BEUiBTJlAgNTAwIEVURiBUcnVzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInByb05hbWVcIjogXCJOQVNEQVE6UVFRXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkludmVzY28gUVFRIFRydXN0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwicHJvTmFtZVwiOiBcIk5ZU0U6SVdNXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcImlTaGFyZXMgUnVzc2VsbCAyMDAwIEVURlwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInNob3dTeW1ib2xMb2dvXCI6IHRydWUsXG4gICAgICBcImlzVHJhbnNwYXJlbnRcIjogdHJ1ZSxcbiAgICAgIFwiZGlzcGxheU1vZGVcIjogXCJhZGFwdGl2ZVwiLFxuICAgICAgXCJjb2xvclRoZW1lXCI6IFwiZGFya1wiLFxuICAgICAgXCJsb2NhbGVcIjogXCJlblwiXG4gICAgfSlcblxuICAgIGNvbnN0IHdpZGdldENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50cmFkaW5ndmlldy13aWRnZXQtY29udGFpbmVyX193aWRnZXQnKVxuICAgIGlmICh3aWRnZXRDb250YWluZXIpIHtcbiAgICAgIHdpZGdldENvbnRhaW5lci5hcHBlbmRDaGlsZChzY3JpcHQpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChmYWxsYmFja1RpbWVyKVxuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG4gICAgfVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7LyogUmVhbC10aW1lIFN0b2NrIFRpY2tlciB3aXRoIFRyYWRpbmdWaWV3ICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdG9jay10aWNrZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFkaW5ndmlldy13aWRnZXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFkaW5ndmlldy13aWRnZXQtY29udGFpbmVyX193aWRnZXRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIExvYWRpbmcgaW5kaWNhdG9yIHBvc2l0aW9uZWQgYmVsb3cgdGlja2VyICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aWNrZXItbG9hZGluZ1wiIGlkPVwidGlja2VyLWxvYWRpbmdcIj5cbiAgICAgICAgTG9hZGluZyByZWFsLXRpbWUgbWFya2V0IGRhdGEuLi5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7LyogSG92ZXIgUG9wdXAgZm9yIFN0b2NrIENoYXJ0cyAqL31cbiAgICAgIDxTdG9ja0hvdmVyUG9wdXAgXG4gICAgICAgIHN5bWJvbD17cG9wdXBTdGF0ZS5zeW1ib2x9XG4gICAgICAgIHZpc2libGU9e3BvcHVwU3RhdGUudmlzaWJsZX1cbiAgICAgICAgeD17cG9wdXBTdGF0ZS54fVxuICAgICAgICB5PXtwb3B1cFN0YXRlLnl9XG4gICAgICAvPlxuICAgIDwvPlxuICApXG59Il0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiU3RvY2tIb3ZlclBvcHVwIiwiU3RvY2tUaWNrZXIiLCJwb3B1cFN0YXRlIiwic2V0UG9wdXBTdGF0ZSIsInZpc2libGUiLCJzeW1ib2wiLCJ4IiwieSIsInN0b2NrRGF0YUNhY2hlIiwiTWFwIiwibGFzdFVwZGF0ZVRpbWUiLCJ3aW5kb3ciLCJvblRyYWRpbmdWaWV3V2lkZ2V0TG9hZCIsImNvbnNvbGUiLCJsb2ciLCJsb2FkaW5nRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsIm9wYWNpdHkiLCJzZXRUaW1lb3V0IiwiZGlzcGxheSIsImluaXRQb2x5Z29uTUNQSW50ZWdyYXRpb24iLCJzZXRJbnRlcnZhbCIsInJlZnJlc2hNYXJrZXREYXRhIiwiZXJyb3IiLCJzeW1ib2xzIiwiRGF0ZSIsIm5vdyIsInNldHVwSG92ZXJEZXRlY3Rpb24iLCJob3ZlclRpbWVyIiwibGFzdFN5bWJvbCIsInRpY2tlckNvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImNsZWFyVGltZW91dCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWxhdGl2ZVgiLCJjbGllbnRYIiwibGVmdCIsInN5bWJvbERhdGEiLCJleGNoYW5nZSIsIm5hbWUiLCJ2aXNpYmxlV2lkdGgiLCJ3aWR0aCIsImVzdGltYXRlZFN5bWJvbFdpZHRoIiwiY3VycmVudFRpbWUiLCJzY3JvbGxPZmZzZXQiLCJsZW5ndGgiLCJhZGp1c3RlZFBvc2l0aW9uIiwic3ltYm9sSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJzeW1ib2xJbmZvIiwibWluIiwiaW5uZXJXaWR0aCIsIm1heCIsImNsaWVudFkiLCJwcmV2Iiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwiZm9yRWFjaCIsIm11dGF0aW9uIiwidHlwZSIsImlmcmFtZSIsImRpc2Nvbm5lY3QiLCJ0aWNrZXJFbGVtZW50Iiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJmYWxsYmFja1RpbWVyIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImFzeW5jIiwiaW5uZXJIVE1MIiwiSlNPTiIsInN0cmluZ2lmeSIsIndpZGdldENvbnRhaW5lciIsImFwcGVuZENoaWxkIiwiZGl2IiwiY2xhc3NOYW1lIiwiaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/StockTicker.tsx\n"));

/***/ })

});