"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/components/StockTicker.tsx":
/*!****************************************!*\
  !*** ./app/components/StockTicker.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ StockTicker; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _StockHoverPopup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StockHoverPopup */ \"(app-pages-browser)/./app/components/StockHoverPopup.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction StockTicker() {\n    _s();\n    const [popupState, setPopupState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        visible: false,\n        symbol: \"\",\n        exchange: \"\",\n        name: \"\",\n        x: 0,\n        y: 0\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Real-time Stock Ticker Integration\n        let stockDataCache = new Map();\n        let lastUpdateTime = 0;\n        // TradingView widget callback - handles widget loaded event\n        // @ts-ignore\n        window.onTradingViewWidgetLoad = function() {\n            console.log(\"✅ TradingView ticker widget loaded successfully\");\n            // Hide loading text once widget is loaded\n            const loadingElement = document.getElementById(\"ticker-loading\");\n            if (loadingElement) {\n                loadingElement.style.opacity = \"0\";\n                setTimeout(()=>{\n                    loadingElement.style.display = \"none\";\n                }, 300);\n            }\n            // Initialize Polygon MCP integration for additional data\n            initPolygonMCPIntegration();\n        };\n        // Polygon MCP Integration for enhanced data\n        async function initPolygonMCPIntegration() {\n            try {\n                // This would integrate with the backend Polygon MCP collector\n                console.log(\"\\uD83D\\uDD04 Initializing Polygon MCP integration for enhanced data...\");\n                // Set up periodic data refresh for our own analytics\n                setInterval(refreshMarketData, 30000) // Every 30 seconds\n                ;\n                // Initial data load\n                await refreshMarketData();\n            } catch (error) {\n                console.log(\"⚠️ Polygon MCP integration optional - using TradingView data only\");\n            }\n        }\n        async function refreshMarketData() {\n            try {\n                // This would call our backend endpoint that uses Polygon MCP\n                // For now, just log the intention\n                console.log(\"\\uD83D\\uDD04 Refreshing market data via backend API...\");\n                const symbols = [\n                    \"AAPL\",\n                    \"MSFT\",\n                    \"GOOGL\",\n                    \"AMZN\",\n                    \"TSLA\",\n                    \"META\",\n                    \"NVDA\",\n                    \"SPY\"\n                ];\n                // Future: Replace with actual backend call\n                // const response = await fetch('/api/market-data/real-time', {\n                //     method: 'POST',\n                //     headers: { 'Content-Type': 'application/json' },\n                //     body: JSON.stringify({ symbols })\n                // });\n                // const data = await response.json();\n                lastUpdateTime = Date.now();\n            } catch (error) {\n                console.log(\"\\uD83D\\uDCCA Using TradingView data as primary source\");\n            }\n        }\n        // Set up hover detection for stock symbols\n        const setupHoverDetection = ()=>{\n            let hoverTimer;\n            let lastSymbol = \"\";\n            // Listen for mouse events on the ticker area\n            const tickerContainer = document.querySelector(\".stock-ticker\");\n            if (tickerContainer) {\n                tickerContainer.addEventListener(\"mousemove\", (e)=>{\n                    clearTimeout(hoverTimer);\n                    // Extract symbol from hover position with improved accuracy\n                    const rect = tickerContainer.getBoundingClientRect();\n                    const relativeX = e.clientX - rect.left;\n                    // Define symbols in the exact order they appear in the ticker\n                    const symbolData = [\n                        {\n                            symbol: \"AAPL\",\n                            exchange: \"NASDAQ\",\n                            name: \"Apple Inc.\"\n                        },\n                        {\n                            symbol: \"MSFT\",\n                            exchange: \"NASDAQ\",\n                            name: \"Microsoft Corporation\"\n                        },\n                        {\n                            symbol: \"GOOGL\",\n                            exchange: \"NASDAQ\",\n                            name: \"Alphabet Inc.\"\n                        },\n                        {\n                            symbol: \"AMZN\",\n                            exchange: \"NASDAQ\",\n                            name: \"Amazon.com Inc.\"\n                        },\n                        {\n                            symbol: \"TSLA\",\n                            exchange: \"NASDAQ\",\n                            name: \"Tesla Inc.\"\n                        },\n                        {\n                            symbol: \"META\",\n                            exchange: \"NASDAQ\",\n                            name: \"Meta Platforms Inc.\"\n                        },\n                        {\n                            symbol: \"NVDA\",\n                            exchange: \"NASDAQ\",\n                            name: \"NVIDIA Corporation\"\n                        },\n                        {\n                            symbol: \"SPY\",\n                            exchange: \"AMEX\",\n                            name: \"SPDR S&P 500 ETF Trust\"\n                        },\n                        {\n                            symbol: \"QQQ\",\n                            exchange: \"NASDAQ\",\n                            name: \"Invesco QQQ Trust\"\n                        },\n                        {\n                            symbol: \"IWM\",\n                            exchange: \"NYSE\",\n                            name: \"iShares Russell 2000 ETF\"\n                        }\n                    ];\n                    // More precise symbol detection\n                    // The ticker typically shows about 4-6 symbols at once, so we need to account for scrolling\n                    const visibleWidth = rect.width;\n                    const estimatedSymbolWidth = visibleWidth / 5 // Assume 5 visible symbols at once\n                    ;\n                    // Get the symbol based on position, accounting for the scrolling nature of the ticker\n                    const currentTime = Date.now();\n                    const scrollOffset = currentTime / 50 % (symbolData.length * estimatedSymbolWidth // Simulate scroll\n                    );\n                    const adjustedPosition = (relativeX + scrollOffset) % (symbolData.length * estimatedSymbolWidth);\n                    const symbolIndex = Math.floor(adjustedPosition / estimatedSymbolWidth) % symbolData.length;\n                    const symbolInfo = symbolData[symbolIndex];\n                    if (symbolInfo && symbolInfo.symbol !== lastSymbol) {\n                        lastSymbol = symbolInfo.symbol;\n                        hoverTimer = setTimeout(()=>{\n                            setPopupState({\n                                visible: true,\n                                symbol: symbolInfo.symbol,\n                                exchange: symbolInfo.exchange,\n                                name: symbolInfo.name,\n                                x: Math.min(e.clientX + 15, window.innerWidth - 500),\n                                y: Math.max(e.clientY - 400, 100) // Position above the ticker\n                            });\n                        }, 200) // Quick response\n                        ;\n                    }\n                });\n                tickerContainer.addEventListener(\"mouseleave\", ()=>{\n                    clearTimeout(hoverTimer);\n                    lastSymbol = \"\";\n                    setPopupState((prev)=>({\n                            ...prev,\n                            visible: false\n                        }));\n                });\n            }\n        };\n        // Set up TradingView widget monitoring\n        const observer = new MutationObserver(function(mutations) {\n            mutations.forEach(function(mutation) {\n                if (mutation.type === \"childList\") {\n                    const iframe = document.querySelector(\".stock-ticker iframe\");\n                    if (iframe) {\n                        console.log(\"\\uD83D\\uDCC8 Real-time ticker iframe loaded\");\n                        // Hide loading text when iframe is detected\n                        const loadingElement = document.getElementById(\"ticker-loading\");\n                        if (loadingElement) {\n                            loadingElement.style.opacity = \"0\";\n                            setTimeout(()=>{\n                                loadingElement.style.display = \"none\";\n                            }, 300);\n                        }\n                        // Set up hover detection after iframe loads\n                        setTimeout(setupHoverDetection, 1000);\n                        observer.disconnect();\n                    }\n                }\n            });\n        });\n        const tickerElement = document.querySelector(\".stock-ticker\");\n        if (tickerElement) {\n            observer.observe(tickerElement, {\n                childList: true,\n                subtree: true\n            });\n        }\n        // Fallback: hide loading text after 10 seconds regardless\n        const fallbackTimer = setTimeout(()=>{\n            const loadingElement = document.getElementById(\"ticker-loading\");\n            if (loadingElement && loadingElement.style.display !== \"none\") {\n                loadingElement.style.opacity = \"0\";\n                setTimeout(()=>{\n                    loadingElement.style.display = \"none\";\n                }, 300);\n            }\n        }, 10000);\n        // Load TradingView script\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = \"https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js\";\n        script.async = true;\n        script.innerHTML = JSON.stringify({\n            \"symbols\": [\n                {\n                    \"proName\": \"NASDAQ:AAPL\",\n                    \"title\": \"Apple Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:MSFT\",\n                    \"title\": \"Microsoft Corporation\"\n                },\n                {\n                    \"proName\": \"NASDAQ:GOOGL\",\n                    \"title\": \"Alphabet Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:AMZN\",\n                    \"title\": \"Amazon.com Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:TSLA\",\n                    \"title\": \"Tesla Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:META\",\n                    \"title\": \"Meta Platforms Inc.\"\n                },\n                {\n                    \"proName\": \"NASDAQ:NVDA\",\n                    \"title\": \"NVIDIA Corporation\"\n                },\n                {\n                    \"proName\": \"AMEX:SPY\",\n                    \"title\": \"SPDR S&P 500 ETF Trust\"\n                },\n                {\n                    \"proName\": \"NASDAQ:QQQ\",\n                    \"title\": \"Invesco QQQ Trust\"\n                },\n                {\n                    \"proName\": \"NYSE:IWM\",\n                    \"title\": \"iShares Russell 2000 ETF\"\n                }\n            ],\n            \"showSymbolLogo\": true,\n            \"isTransparent\": true,\n            \"displayMode\": \"adaptive\",\n            \"colorTheme\": \"dark\",\n            \"locale\": \"en\"\n        });\n        const widgetContainer = document.querySelector(\".tradingview-widget-container__widget\");\n        if (widgetContainer) {\n            widgetContainer.appendChild(script);\n        }\n        return ()=>{\n            clearTimeout(fallbackTimer);\n            observer.disconnect();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"stock-ticker\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"tradingview-widget-container\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"tradingview-widget-container__widget\"\n                    }, void 0, false, {\n                        fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                        lineNumber: 258,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                    lineNumber: 257,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                lineNumber: 256,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"ticker-loading\",\n                id: \"ticker-loading\",\n                children: \"Loading real-time market data...\"\n            }, void 0, false, {\n                fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                lineNumber: 263,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_StockHoverPopup__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                symbol: popupState.symbol,\n                visible: popupState.visible,\n                x: popupState.x,\n                y: popupState.y\n            }, void 0, false, {\n                fileName: \"/Users/michaellocke/WebstormProjects/Home/public/stock-picker/app/components/StockTicker.tsx\",\n                lineNumber: 268,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_s(StockTicker, \"FYlUt6+VtQIJBoaJfD/n8d4peJY=\");\n_c = StockTicker;\nvar _c;\n$RefreshReg$(_c, \"StockTicker\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL1N0b2NrVGlja2VyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRTJDO0FBQ0k7QUFFaEMsU0FBU0c7O0lBQ3RCLE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHSiwrQ0FBUUEsQ0FBQztRQUMzQ0ssU0FBUztRQUNUQyxRQUFRO1FBQ1JDLFVBQVU7UUFDVkMsTUFBTTtRQUNOQyxHQUFHO1FBQ0hDLEdBQUc7SUFDTDtJQUNBWCxnREFBU0EsQ0FBQztRQUNSLHFDQUFxQztRQUNyQyxJQUFJWSxpQkFBaUIsSUFBSUM7UUFDekIsSUFBSUMsaUJBQWlCO1FBRXJCLDREQUE0RDtRQUM1RCxhQUFhO1FBQ2JDLE9BQU9DLHVCQUF1QixHQUFHO1lBQy9CQyxRQUFRQyxHQUFHLENBQUM7WUFFWiwwQ0FBMEM7WUFDMUMsTUFBTUMsaUJBQWlCQyxTQUFTQyxjQUFjLENBQUM7WUFDL0MsSUFBSUYsZ0JBQWdCO2dCQUNsQkEsZUFBZUcsS0FBSyxDQUFDQyxPQUFPLEdBQUc7Z0JBQy9CQyxXQUFXO29CQUNUTCxlQUFlRyxLQUFLLENBQUNHLE9BQU8sR0FBRztnQkFDakMsR0FBRztZQUNMO1lBRUEseURBQXlEO1lBQ3pEQztRQUNGO1FBRUEsNENBQTRDO1FBQzVDLGVBQWVBO1lBQ2IsSUFBSTtnQkFDRiw4REFBOEQ7Z0JBQzlEVCxRQUFRQyxHQUFHLENBQUM7Z0JBRVoscURBQXFEO2dCQUNyRFMsWUFBWUMsbUJBQW1CLE9BQU8sbUJBQW1COztnQkFFekQsb0JBQW9CO2dCQUNwQixNQUFNQTtZQUNSLEVBQUUsT0FBT0MsT0FBTztnQkFDZFosUUFBUUMsR0FBRyxDQUFDO1lBQ2Q7UUFDRjtRQUVBLGVBQWVVO1lBQ2IsSUFBSTtnQkFDRiw2REFBNkQ7Z0JBQzdELGtDQUFrQztnQkFDbENYLFFBQVFDLEdBQUcsQ0FBQztnQkFFWixNQUFNWSxVQUFVO29CQUFDO29CQUFRO29CQUFRO29CQUFTO29CQUFRO29CQUFRO29C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LDhEQUFDckYsd0RBQWVBO2dCQUNkSyxRQUFRSCxXQUFXRyxNQUFNO2dCQUN6QkQsU0FBU0YsV0FBV0UsT0FBTztnQkFDM0JJLEdBQUdOLFdBQVdNLENBQUM7Z0JBQ2ZDLEdBQUdQLFdBQVdPLENBQUM7Ozs7Ozs7O0FBSXZCO0dBOVF3QlI7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvU3RvY2tUaWNrZXIudHN4P2YyMTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBTdG9ja0hvdmVyUG9wdXAgZnJvbSAnLi9TdG9ja0hvdmVyUG9wdXAnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0b2NrVGlja2VyKCkge1xuICBjb25zdCBbcG9wdXBTdGF0ZSwgc2V0UG9wdXBTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgdmlzaWJsZTogZmFsc2UsXG4gICAgc3ltYm9sOiAnJyxcbiAgICBleGNoYW5nZTogJycsXG4gICAgbmFtZTogJycsXG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH0pXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gUmVhbC10aW1lIFN0b2NrIFRpY2tlciBJbnRlZ3JhdGlvblxuICAgIGxldCBzdG9ja0RhdGFDYWNoZSA9IG5ldyBNYXAoKVxuICAgIGxldCBsYXN0VXBkYXRlVGltZSA9IDBcbiAgICBcbiAgICAvLyBUcmFkaW5nVmlldyB3aWRnZXQgY2FsbGJhY2sgLSBoYW5kbGVzIHdpZGdldCBsb2FkZWQgZXZlbnRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd2luZG93Lm9uVHJhZGluZ1ZpZXdXaWRnZXRMb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIFRyYWRpbmdWaWV3IHRpY2tlciB3aWRnZXQgbG9hZGVkIHN1Y2Nlc3NmdWxseScpXG4gICAgICBcbiAgICAgIC8vIEhpZGUgbG9hZGluZyB0ZXh0IG9uY2Ugd2lkZ2V0IGlzIGxvYWRlZFxuICAgICAgY29uc3QgbG9hZGluZ0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGlja2VyLWxvYWRpbmcnKVxuICAgICAgaWYgKGxvYWRpbmdFbGVtZW50KSB7XG4gICAgICAgIGxvYWRpbmdFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCdcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgbG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICB9LCAzMDApXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEluaXRpYWxpemUgUG9seWdvbiBNQ1AgaW50ZWdyYXRpb24gZm9yIGFkZGl0aW9uYWwgZGF0YVxuICAgICAgaW5pdFBvbHlnb25NQ1BJbnRlZ3JhdGlvbigpXG4gICAgfVxuXG4gICAgLy8gUG9seWdvbiBNQ1AgSW50ZWdyYXRpb24gZm9yIGVuaGFuY2VkIGRhdGFcbiAgICBhc3luYyBmdW5jdGlvbiBpbml0UG9seWdvbk1DUEludGVncmF0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3b3VsZCBpbnRlZ3JhdGUgd2l0aCB0aGUgYmFja2VuZCBQb2x5Z29uIE1DUCBjb2xsZWN0b3JcbiAgICAgICAgY29uc29sZS5sb2coJ/CflIQgSW5pdGlhbGl6aW5nIFBvbHlnb24gTUNQIGludGVncmF0aW9uIGZvciBlbmhhbmNlZCBkYXRhLi4uJylcbiAgICAgICAgXG4gICAgICAgIC8vIFNldCB1cCBwZXJpb2RpYyBkYXRhIHJlZnJlc2ggZm9yIG91ciBvd24gYW5hbHl0aWNzXG4gICAgICAgIHNldEludGVydmFsKHJlZnJlc2hNYXJrZXREYXRhLCAzMDAwMCkgLy8gRXZlcnkgMzAgc2Vjb25kc1xuICAgICAgICBcbiAgICAgICAgLy8gSW5pdGlhbCBkYXRhIGxvYWRcbiAgICAgICAgYXdhaXQgcmVmcmVzaE1hcmtldERhdGEoKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyBQb2x5Z29uIE1DUCBpbnRlZ3JhdGlvbiBvcHRpb25hbCAtIHVzaW5nIFRyYWRpbmdWaWV3IGRhdGEgb25seScpXG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gcmVmcmVzaE1hcmtldERhdGEoKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdvdWxkIGNhbGwgb3VyIGJhY2tlbmQgZW5kcG9pbnQgdGhhdCB1c2VzIFBvbHlnb24gTUNQXG4gICAgICAgIC8vIEZvciBub3csIGp1c3QgbG9nIHRoZSBpbnRlbnRpb25cbiAgICAgICAgY29uc29sZS5sb2coJ/CflIQgUmVmcmVzaGluZyBtYXJrZXQgZGF0YSB2aWEgYmFja2VuZCBBUEkuLi4nKVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgc3ltYm9scyA9IFsnQUFQTCcsICdNU0ZUJywgJ0dPT0dMJywgJ0FNWk4nLCAnVFNMQScsICdNRVRBJywgJ05WREEnLCAnU1BZJ11cbiAgICAgICAgXG4gICAgICAgIC8vIEZ1dHVyZTogUmVwbGFjZSB3aXRoIGFjdHVhbCBiYWNrZW5kIGNhbGxcbiAgICAgICAgLy8gY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9tYXJrZXQtZGF0YS9yZWFsLXRpbWUnLCB7XG4gICAgICAgIC8vICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgLy8gICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAvLyAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBzeW1ib2xzIH0pXG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBcbiAgICAgICAgbGFzdFVwZGF0ZVRpbWUgPSBEYXRlLm5vdygpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygn8J+TiiBVc2luZyBUcmFkaW5nVmlldyBkYXRhIGFzIHByaW1hcnkgc291cmNlJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgdXAgaG92ZXIgZGV0ZWN0aW9uIGZvciBzdG9jayBzeW1ib2xzXG4gICAgY29uc3Qgc2V0dXBIb3ZlckRldGVjdGlvbiA9ICgpID0+IHtcbiAgICAgIGxldCBob3ZlclRpbWVyOiBOb2RlSlMuVGltZW91dFxuICAgICAgbGV0IGxhc3RTeW1ib2wgPSAnJ1xuICAgICAgXG4gICAgICAvLyBMaXN0ZW4gZm9yIG1vdXNlIGV2ZW50cyBvbiB0aGUgdGlja2VyIGFyZWFcbiAgICAgIGNvbnN0IHRpY2tlckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdG9jay10aWNrZXInKVxuICAgICAgaWYgKHRpY2tlckNvbnRhaW5lcikge1xuICAgICAgICB0aWNrZXJDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGUpID0+IHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoaG92ZXJUaW1lcilcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBFeHRyYWN0IHN5bWJvbCBmcm9tIGhvdmVyIHBvc2l0aW9uIHdpdGggaW1wcm92ZWQgYWNjdXJhY3lcbiAgICAgICAgICBjb25zdCByZWN0ID0gdGlja2VyQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgY29uc3QgcmVsYXRpdmVYID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRGVmaW5lIHN5bWJvbHMgaW4gdGhlIGV4YWN0IG9yZGVyIHRoZXkgYXBwZWFyIGluIHRoZSB0aWNrZXJcbiAgICAgICAgICBjb25zdCBzeW1ib2xEYXRhID0gW1xuICAgICAgICAgICAgeyBzeW1ib2w6ICdBQVBMJywgZXhjaGFuZ2U6ICdOQVNEQVEnLCBuYW1lOiAnQXBwbGUgSW5jLicgfSxcbiAgICAgICAgICAgIHsgc3ltYm9sOiAnTVNGVCcsIGV4Y2hhbmdlOiAnTkFTREFRJywgbmFtZTogJ01pY3Jvc29mdCBDb3Jwb3JhdGlvbicgfSxcbiAgICAgICAgICAgIHsgc3ltYm9sOiAnR09PR0wnLCBleGNoYW5nZTogJ05BU0RBUScsIG5hbWU6ICdBbHBoYWJldCBJbmMuJyB9LFxuICAgICAgICAgICAgeyBzeW1ib2w6ICdBTVpOJywgZXhjaGFuZ2U6ICdOQVNEQVEnLCBuYW1lOiAnQW1hem9uLmNvbSBJbmMuJyB9LFxuICAgICAgICAgICAgeyBzeW1ib2w6ICdUU0xBJywgZXhjaGFuZ2U6ICdOQVNEQVEnLCBuYW1lOiAnVGVzbGEgSW5jLicgfSxcbiAgICAgICAgICAgIHsgc3ltYm9sOiAnTUVUQScsIGV4Y2hhbmdlOiAnTkFTREFRJywgbmFtZTogJ01ldGEgUGxhdGZvcm1zIEluYy4nIH0sXG4gICAgICAgICAgICB7IHN5bWJvbDogJ05WREEnLCBleGNoYW5nZTogJ05BU0RBUScsIG5hbWU6ICdOVklESUEgQ29ycG9yYXRpb24nIH0sXG4gICAgICAgICAgICB7IHN5bWJvbDogJ1NQWScsIGV4Y2hhbmdlOiAnQU1FWCcsIG5hbWU6ICdTUERSIFMmUCA1MDAgRVRGIFRydXN0JyB9LFxuICAgICAgICAgICAgeyBzeW1ib2w6ICdRUVEnLCBleGNoYW5nZTogJ05BU0RBUScsIG5hbWU6ICdJbnZlc2NvIFFRUSBUcnVzdCcgfSxcbiAgICAgICAgICAgIHsgc3ltYm9sOiAnSVdNJywgZXhjaGFuZ2U6ICdOWVNFJywgbmFtZTogJ2lTaGFyZXMgUnVzc2VsbCAyMDAwIEVURicgfVxuICAgICAgICAgIF1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNb3JlIHByZWNpc2Ugc3ltYm9sIGRldGVjdGlvblxuICAgICAgICAgIC8vIFRoZSB0aWNrZXIgdHlwaWNhbGx5IHNob3dzIGFib3V0IDQtNiBzeW1ib2xzIGF0IG9uY2UsIHNvIHdlIG5lZWQgdG8gYWNjb3VudCBmb3Igc2Nyb2xsaW5nXG4gICAgICAgICAgY29uc3QgdmlzaWJsZVdpZHRoID0gcmVjdC53aWR0aFxuICAgICAgICAgIGNvbnN0IGVzdGltYXRlZFN5bWJvbFdpZHRoID0gdmlzaWJsZVdpZHRoIC8gNSAvLyBBc3N1bWUgNSB2aXNpYmxlIHN5bWJvbHMgYXQgb25jZVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIEdldCB0aGUgc3ltYm9sIGJhc2VkIG9uIHBvc2l0aW9uLCBhY2NvdW50aW5nIGZvciB0aGUgc2Nyb2xsaW5nIG5hdHVyZSBvZiB0aGUgdGlja2VyXG4gICAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpXG4gICAgICAgICAgY29uc3Qgc2Nyb2xsT2Zmc2V0ID0gKGN1cnJlbnRUaW1lIC8gNTApICUgKHN5bWJvbERhdGEubGVuZ3RoICogZXN0aW1hdGVkU3ltYm9sV2lkdGgpIC8vIFNpbXVsYXRlIHNjcm9sbFxuICAgICAgICAgIGNvbnN0IGFkanVzdGVkUG9zaXRpb24gPSAocmVsYXRpdmVYICsgc2Nyb2xsT2Zmc2V0KSAlIChzeW1ib2xEYXRhLmxlbmd0aCAqIGVzdGltYXRlZFN5bWJvbFdpZHRoKVxuICAgICAgICAgIGNvbnN0IHN5bWJvbEluZGV4ID0gTWF0aC5mbG9vcihhZGp1c3RlZFBvc2l0aW9uIC8gZXN0aW1hdGVkU3ltYm9sV2lkdGgpICUgc3ltYm9sRGF0YS5sZW5ndGhcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBzeW1ib2xJbmZvID0gc3ltYm9sRGF0YVtzeW1ib2xJbmRleF1cbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoc3ltYm9sSW5mbyAmJiBzeW1ib2xJbmZvLnN5bWJvbCAhPT0gbGFzdFN5bWJvbCkge1xuICAgICAgICAgICAgbGFzdFN5bWJvbCA9IHN5bWJvbEluZm8uc3ltYm9sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGhvdmVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgc2V0UG9wdXBTdGF0ZSh7XG4gICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzeW1ib2w6IHN5bWJvbEluZm8uc3ltYm9sLFxuICAgICAgICAgICAgICAgIGV4Y2hhbmdlOiBzeW1ib2xJbmZvLmV4Y2hhbmdlLFxuICAgICAgICAgICAgICAgIG5hbWU6IHN5bWJvbEluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICB4OiBNYXRoLm1pbihlLmNsaWVudFggKyAxNSwgd2luZG93LmlubmVyV2lkdGggLSA1MDApLFxuICAgICAgICAgICAgICAgIHk6IE1hdGgubWF4KGUuY2xpZW50WSAtIDQwMCwgMTAwKSAvLyBQb3NpdGlvbiBhYm92ZSB0aGUgdGlja2VyXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9LCAyMDApIC8vIFF1aWNrIHJlc3BvbnNlXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgdGlja2VyQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGhvdmVyVGltZXIpXG4gICAgICAgICAgbGFzdFN5bWJvbCA9ICcnXG4gICAgICAgICAgc2V0UG9wdXBTdGF0ZShwcmV2ID0+ICh7IC4uLnByZXYsIHZpc2libGU6IGZhbHNlIH0pKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB1cCBUcmFkaW5nVmlldyB3aWRnZXQgbW9uaXRvcmluZ1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7XG4gICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtdXRhdGlvbikge1xuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICBjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RvY2stdGlja2VyIGlmcmFtZScpXG4gICAgICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfk4ggUmVhbC10aW1lIHRpY2tlciBpZnJhbWUgbG9hZGVkJylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSGlkZSBsb2FkaW5nIHRleHQgd2hlbiBpZnJhbWUgaXMgZGV0ZWN0ZWRcbiAgICAgICAgICAgIGNvbnN0IGxvYWRpbmdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpY2tlci1sb2FkaW5nJylcbiAgICAgICAgICAgIGlmIChsb2FkaW5nRWxlbWVudCkge1xuICAgICAgICAgICAgICBsb2FkaW5nRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgICAgICAgfSwgMzAwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTZXQgdXAgaG92ZXIgZGV0ZWN0aW9uIGFmdGVyIGlmcmFtZSBsb2Fkc1xuICAgICAgICAgICAgc2V0VGltZW91dChzZXR1cEhvdmVyRGV0ZWN0aW9uLCAxMDAwKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGNvbnN0IHRpY2tlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RvY2stdGlja2VyJylcbiAgICBpZiAodGlja2VyRWxlbWVudCkge1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aWNrZXJFbGVtZW50LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgXG4gICAgLy8gRmFsbGJhY2s6IGhpZGUgbG9hZGluZyB0ZXh0IGFmdGVyIDEwIHNlY29uZHMgcmVnYXJkbGVzc1xuICAgIGNvbnN0IGZhbGxiYWNrVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IGxvYWRpbmdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpY2tlci1sb2FkaW5nJylcbiAgICAgIGlmIChsb2FkaW5nRWxlbWVudCAmJiBsb2FkaW5nRWxlbWVudC5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcbiAgICAgICAgbG9hZGluZ0VsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJ1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBsb2FkaW5nRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIH0sIDMwMClcbiAgICAgIH1cbiAgICB9LCAxMDAwMClcblxuICAgIC8vIExvYWQgVHJhZGluZ1ZpZXcgc2NyaXB0XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgc2NyaXB0LnNyYyA9ICdodHRwczovL3MzLnRyYWRpbmd2aWV3LmNvbS9leHRlcm5hbC1lbWJlZGRpbmcvZW1iZWQtd2lkZ2V0LXRpY2tlci10YXBlLmpzJ1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWVcbiAgICBzY3JpcHQuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgXCJzeW1ib2xzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwicHJvTmFtZVwiOiBcIk5BU0RBUTpBQVBMXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkFwcGxlIEluYy5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiTkFTREFROk1TRlRcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiTWljcm9zb2Z0IENvcnBvcmF0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwicHJvTmFtZVwiOiBcIk5BU0RBUTpHT09HTFwiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJBbHBoYWJldCBJbmMuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwicHJvTmFtZVwiOiBcIk5BU0RBUTpBTVpOXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkFtYXpvbi5jb20gSW5jLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInByb05hbWVcIjogXCJOQVNEQVE6VFNMQVwiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUZXNsYSBJbmMuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwicHJvTmFtZVwiOiBcIk5BU0RBUTpNRVRBXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIk1ldGEgUGxhdGZvcm1zIEluYy5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiTkFTREFROk5WREFcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiTlZJRElBIENvcnBvcmF0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwicHJvTmFtZVwiOiBcIkFNRVg6U1BZXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlNQRFIgUyZQIDUwMCBFVEYgVHJ1c3RcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9OYW1lXCI6IFwiTkFTREFROlFRUVwiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJJbnZlc2NvIFFRUSBUcnVzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInByb05hbWVcIjogXCJOWVNFOklXTVwiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJpU2hhcmVzIFJ1c3NlbGwgMjAwMCBFVEZcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzaG93U3ltYm9sTG9nb1wiOiB0cnVlLFxuICAgICAgXCJpc1RyYW5zcGFyZW50XCI6IHRydWUsXG4gICAgICBcImRpc3BsYXlNb2RlXCI6IFwiYWRhcHRpdmVcIixcbiAgICAgIFwiY29sb3JUaGVtZVwiOiBcImRhcmtcIixcbiAgICAgIFwibG9jYWxlXCI6IFwiZW5cIlxuICAgIH0pXG5cbiAgICBjb25zdCB3aWRnZXRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudHJhZGluZ3ZpZXctd2lkZ2V0LWNvbnRhaW5lcl9fd2lkZ2V0JylcbiAgICBpZiAod2lkZ2V0Q29udGFpbmVyKSB7XG4gICAgICB3aWRnZXRDb250YWluZXIuYXBwZW5kQ2hpbGQoc2NyaXB0KVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoZmFsbGJhY2tUaW1lcilcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuICAgIH1cbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgey8qIFJlYWwtdGltZSBTdG9jayBUaWNrZXIgd2l0aCBUcmFkaW5nVmlldyAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RvY2stdGlja2VyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhZGluZ3ZpZXctd2lkZ2V0LWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhZGluZ3ZpZXctd2lkZ2V0LWNvbnRhaW5lcl9fd2lkZ2V0XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBMb2FkaW5nIGluZGljYXRvciBwb3NpdGlvbmVkIGJlbG93IHRpY2tlciAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGlja2VyLWxvYWRpbmdcIiBpZD1cInRpY2tlci1sb2FkaW5nXCI+XG4gICAgICAgIExvYWRpbmcgcmVhbC10aW1lIG1hcmtldCBkYXRhLi4uXG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIEhvdmVyIFBvcHVwIGZvciBTdG9jayBDaGFydHMgKi99XG4gICAgICA8U3RvY2tIb3ZlclBvcHVwIFxuICAgICAgICBzeW1ib2w9e3BvcHVwU3RhdGUuc3ltYm9sfVxuICAgICAgICB2aXNpYmxlPXtwb3B1cFN0YXRlLnZpc2libGV9XG4gICAgICAgIHg9e3BvcHVwU3RhdGUueH1cbiAgICAgICAgeT17cG9wdXBTdGF0ZS55fVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKVxufSJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIlN0b2NrSG92ZXJQb3B1cCIsIlN0b2NrVGlja2VyIiwicG9wdXBTdGF0ZSIsInNldFBvcHVwU3RhdGUiLCJ2aXNpYmxlIiwic3ltYm9sIiwiZXhjaGFuZ2UiLCJuYW1lIiwieCIsInkiLCJzdG9ja0RhdGFDYWNoZSIsIk1hcCIsImxhc3RVcGRhdGVUaW1lIiwid2luZG93Iiwib25UcmFkaW5nVmlld1dpZGdldExvYWQiLCJjb25zb2xlIiwibG9nIiwibG9hZGluZ0VsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJvcGFjaXR5Iiwic2V0VGltZW91dCIsImRpc3BsYXkiLCJpbml0UG9seWdvbk1DUEludGVncmF0aW9uIiwic2V0SW50ZXJ2YWwiLCJyZWZyZXNoTWFya2V0RGF0YSIsImVycm9yIiwic3ltYm9scyIsIkRhdGUiLCJub3ciLCJzZXR1cEhvdmVyRGV0ZWN0aW9uIiwiaG92ZXJUaW1lciIsImxhc3RTeW1ib2wiLCJ0aWNrZXJDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJjbGVhclRpbWVvdXQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVsYXRpdmVYIiwiY2xpZW50WCIsImxlZnQiLCJzeW1ib2xEYXRhIiwidmlzaWJsZVdpZHRoIiwid2lkdGgiLCJlc3RpbWF0ZWRTeW1ib2xXaWR0aCIsImN1cnJlbnRUaW1lIiwic2Nyb2xsT2Zmc2V0IiwibGVuZ3RoIiwiYWRqdXN0ZWRQb3NpdGlvbiIsInN5bWJvbEluZGV4IiwiTWF0aCIsImZsb29yIiwic3ltYm9sSW5mbyIsIm1pbiIsImlubmVyV2lkdGgiLCJtYXgiLCJjbGllbnRZIiwicHJldiIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsImZvckVhY2giLCJtdXRhdGlvbiIsInR5cGUiLCJpZnJhbWUiLCJkaXNjb25uZWN0IiwidGlja2VyRWxlbWVudCIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiZmFsbGJhY2tUaW1lciIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJhc3luYyIsImlubmVySFRNTCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3aWRnZXRDb250YWluZXIiLCJhcHBlbmRDaGlsZCIsImRpdiIsImNsYXNzTmFtZSIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/StockTicker.tsx\n"));

/***/ })

});